{"name":"Xbus","tagline":"Simple EventBus Implementation for Android","body":"# xBus - 简洁的EventBus实现\r\n\r\n基于发布订阅(Pub/Sub)模式的一个事件消息库，使用通用的 `register(target)`, `unregister(target)`, `post(event)` 消息通信接口，能有效的减少甚至消除Android应用中异步任务逻辑和界面更新之间的耦合，实现模块化，提高开发效率。\r\n\r\n[![Maven Central](http://img.shields.io/badge/2015.08.18-com.mcxiaoke.next:1.0.1-brightgreen.svg)](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.mcxiaoke.xbus%22)\r\n\r\n* 2015.08.18 **1.0.1** - 修复 `unresiger()` 的空指针问题\r\n* 2015.08.08 **1.0.0** - 基本功能全部完成，发布1.0.0正式版\r\n\r\n## 使用指南\r\n\r\n### Gradle集成\r\n\r\n```groovy\r\n\tcompile 'com.mcxiaoke.xbus:bus:1.0.+'\r\n```\r\n\r\n### 接收事件\r\n\r\n```java\r\npublic class SimpleActivity extends Activity {\r\n\r\n    @Override\r\n    protected void onCreate(final Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        // 注册\r\n        Bus.getDefault().register(this);\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        // 取消注册\r\n        Bus.getDefault().unregister(this);\r\n    }\r\n\r\n    @BusReceiver\r\n    public void onStringEvent(String event) {\r\n        // handle your event\r\n        // 这里处理事件\r\n    }\r\n\r\n    @BusReceiver\r\n    public void onSomeEvent(SomeEventClass event) {\r\n    \t// SomeEventClass表示任意的自定义类\r\n        // handle your event\r\n        // 这里处理事件\r\n    }\r\n\r\n    @BusReceiver\r\n    public void onObjectEvent(Object event) {\r\n    \t// 不建议使用Object，会收到所有类型的事件\r\n        // handle your event\r\n        // 这里处理事件\r\n    }\r\n}\r\n```\r\n\r\n### 发送事件\r\n\r\n然后在需要的地方调用 `post(event)` 发送事件通知，如 `Service` 或某个线程里，可以在任何地方发送事件：\r\n\r\n```java\r\n// 比如在IntentService里\r\npublic class SimpleService extends IntentService {\r\n\r\n    public SimpleService() {\r\n        super(\"SimpleService\");\r\n    }\r\n\r\n    @Override\r\n    protected void onHandleIntent(final Intent intent) {\r\n       // 这里是举例，可以在任何地方发送事件\r\n        Bus.getDefault().post(\"String Event\");\r\n        Bus.getDefault().post(new SomeEventClass());\r\n        Bus.getDefault().post(new Object());\r\n    }\r\n}\r\n```\r\n\r\n## 高级用法\r\n\r\n### 任何地方注册\r\n\r\n你还可以选择在 `onStart()` 里注册，在 `onStop()` 里取消注册。你完全可以在任何地方注册和取消注册，没有任何限制。但是建议你在生命周期事件方法里注册和取消注册，如 `Activity/Fragment/Service` 的 `onCreate/onDestroy` 方法里， `register()` 和 `unregister()` 建议配对使用，避免内存泄露。\r\n\r\n```java\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n        // you can also register here\r\n        Bus.getDefault().register(this);\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n        // you can also unregister here\r\n        Bus.getDefault().unregister(this);\r\n    }\r\n```\r\n\r\n### 自定义 `Bus`\r\n\r\n你也可以不使用默认的 `Bus.getDefault()`，改用自己创建的 `Bus` 对象：\r\n\r\n```java\r\npublic class MainApp extends Application {\r\n\r\n    private Bus mBus = new Bus();\r\n\r\n    @Override\r\n    public void onCreate() {\r\n        super.onCreate();\r\n    }\r\n\r\n    public Bus getBus() {\r\n        return mBus;\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Debug\r\n\r\n默认不输出任何LOG信息，可以这样启用调试模式：\r\n\r\n```java\r\npublic Bus setDebug(final boolean debug)\r\n```\r\n\r\n### MethodFinder\r\n\r\n默认使用注解(`@BusReceiver`)识别事件接收器方法，可以这样修改 ：\r\n\r\n```java\r\npublic Bus setMethodFinder(final MethodFinder finder)\r\n```\r\n\r\n默认使用的是 AnnotationMethodFinder，只有使用了 @BusReceiver 的方法才可以接受事件。\r\n\r\n可选使用 `NamedMethodFinder` ，`NamedMethodFinder` 使用方法名识别，默认方法名是 `onEvent` ，你可以指定其它的方法名。\r\n\r\n使用 `NamedMethodFinder` 会比使用 `AnnotationMethodFinder` 效率高一点，因为它忽略注解，直接使用方法名字符串匹配。一般使用，两者差别不大。\r\n\r\n你还可以实现 `MethodFinder` 接口，自定义其它的事件接收器方法匹配模式：\r\n\r\n```\r\ninterface MethodFinder {\r\n\r\n    Set<MethodInfo> find(final Bus bus, final Class<?> targetClass);\r\n}\r\n```\r\n\r\n### StrictMode\r\n\r\n#### 宽泛匹配模式\r\n\r\n默认情况下， `Bus` 使用宽泛的事件类型匹配模式，事件参数会匹配它的父类和接口，如果你调用 `post(String)`，那么这几个方法都会收到举例：\r\n\r\n```java\r\n// 如果你调用这个方法，发送一个StringBuilder类型的事件\r\nBus.getDefault().post(new StringBuilder(\"Event\"));\r\n\r\n// 这几个方法会收到事件\r\npublic void onEvent1(StringBuilder event) // 匹配，类型相符\r\npublic void onEvent2(Object event) // 匹配，StringBuilder是Object的子类\r\npublic void onEvent3(CharSequence event) // 匹配，StringBuilder是CharSequence的实现类\r\npublic void onEvent4(Serializable event) // 匹配，StringBuilder实现了Serializable接口\r\n\r\n// 这几个方法不会收到事件\r\npublic void onEvent5(Exception event) 不匹配，Exception与String完全无关\r\npublic void onEvent6(String event) // 不匹配，StringBuilder不能转换成String类型\r\n\r\n```\r\n\r\n对于 `post(event)` 和 `onEvent(EventType)` ，匹配规则是：如果  `event.getClass()`  可以强制转换成 `EventType`，那么匹配成功，能收到事件。\r\n\r\n#### 严格匹配模式\r\n\r\n可以使用下面的方法更改默认行为，使用严格的事件类型匹配模式：\r\n\r\n```java\r\npublic Bus setStrictMode(final boolean strictMode)\r\n```\r\n\r\n启用严格匹配模式后，发送和接受方法的参数类型必须严格匹配才能收到事件，举例：\r\n\r\n```java\r\n// setStrictMode(true) 启用严格模式后：\r\nBus.getDefault().post(new StringBuilder(\"Event\"));\r\n\r\n// 只有 onEvent1 能收到事件\r\npublic void onEvent1(StringBuilder event)\r\npublic void onEvent2(Object event)public void onEvent3(CharSequence event) \r\npublic void onEvent4(Serializable event)\r\npublic void onEvent5(Exception event)\r\npublic void onEvent6(String event) \r\n```\r\n\r\n对于 `post(event)` 和 `onEvent(EventType)` ，严格模式的匹配规则是当且仅当 `event.getClass().equals(EventType)` 时才能收到事件。\r\n\r\n说明：启用严格模式效率会稍微高一点，因为不会递归查找 `event` 的父类和实现的接口，但是由于 `Bus` 内部使用了缓存，对于同一个事件类型，并不会重复查找，所以实际使用几乎没有差别。\r\n\r\n### StickyEvent\r\n\r\n可以使用下面的方法发送 `Sticky` 事件，这种事件会保留在内存中，当下一个注册者注册时，会立即收到上一次发送的该类型事件，每种类型的事件只会保留一个， `Sticky` 事件使用严格匹配模式。\r\n\r\n```java\r\npublic <E> void postSticky(E event) \r\n```\r\n\r\n一般不需要使用 `Sticky` 事件，但在某些场景下可以用到，比如一个网络状态监听服务，会不断的发送网络状态信息，接受者一旦注册就可以立即收到一个事件，可以知道当前的网络状态。\r\n\r\n### @BusEvent\r\n\r\n还有一个注解 `@BusEvent` 可用于标注某个类是事件类，这个像 `@Override` 注解一样，纯标注用，没有其它用途，没有运行时消耗。\r\n\r\n## 实现教程\r\n\r\n* [`跟我一起写EventBus（一）`](docs/how-to-write-an-eventbus-part1.md)\r\n* [`跟我一起写EventBus（二）`](docs/how-to-write-an-eventbus-part2.md)\r\n* [`跟我一起写EventBus（三）`](docs/how-to-write-an-eventbus-part3.md)\r\n* [`跟我一起写EventBus（四）`](docs/how-to-write-an-eventbus-part4.md)\r\n* [`xBus使用教程`](docs/xbus-user-guide.md)\r\n\r\n## 项目状态\r\n\r\n* 2015.08.03 **0.1.0** 草稿版，实现了一个最简单的可用的原型\r\n* 2015.08.03 **0.2.0** 支持在基类中注册和添加事件接收器方法\r\n* 2015.08.04 **0.6.0** 半成品，支持注册对象和事件类型的继承\r\n* 2015.08.05 **0.7.0** 改进架构，增加扩展支持和错误处理\r\n* 2015.08.06 **0.8.0** 完善了异常处理和简单的测试示例\r\n\r\n------\r\n\r\n## 关于作者\r\n\r\n#### 联系方式\r\n* Blog: <http://blog.mcxiaoke.com>\r\n* Github: <https://github.com/mcxiaoke>\r\n* Email: [mail@mcxiaoke.com](mailto:mail@mcxiaoke.com)\r\n\r\n#### 开源项目\r\n\r\n* Next公共组件库: <https://github.com/mcxiaoke/Android-Next>\r\n* Gradle渠道打包: <https://github.com/mcxiaoke/gradle-packer-plugin>\r\n* EventBus实现xBus: <https://github.com/mcxiaoke/xBus>\r\n* Rx文档中文翻译: <https://github.com/mcxiaoke/RxDocs>\r\n* MQTT协议中文版: <https://github.com/mcxiaoke/mqtt>\r\n* 蘑菇饭App: <https://github.com/mcxiaoke/minicat>\r\n* 饭否客户端: <https://github.com/mcxiaoke/fanfouapp-opensource>\r\n* Volley镜像: <https://github.com/mcxiaoke/android-volley>\r\n\r\n------\r\n\r\n## License\r\n\r\n    Copyright 2015 Xiaoke Zhang\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}